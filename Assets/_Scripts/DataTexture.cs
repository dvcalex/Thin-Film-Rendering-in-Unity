using System;
using UnityEngine;

public class DataTexture : MonoBehaviour
{
    public enum Format
    {
        RGB,
        RGBA
    } 
    
    double[] coat1 = {0.017828628328346703, 0.01782620077280887, 0.017818936600813857, 0.017806891364654978, 0.017790157880441405, 0.017768866574442883, 0.01774318597385883, 0.01771332334803968, 0.017679525508107852, 0.01764207977500221, 0.017601315128231675, 0.017557603550112252, 0.01751136158301582, 0.017463052120219095, 0.01741318645435059, 0.017362326611239005, 0.017311088001216317, 0.017260142424675433, 0.017210221473981466, 0.017162120379747976, 0.017116702356079087, 0.01707490350671533, 0.017037738362182964, 0.0170063061271146, 0.016981797726974765, 0.016965503754588995, 0.01695882342924517, 0.01696327469483842, 0.01698050559869535, 0.017012307109494633, 0.017060627551266055, 0.017127588850986915, 0.01721550482001894, 0.01732690171477705, 0.017464541349870157, 0.01763144706780535, 0.0178309329035584, 0.01806663632027541, 0.018342554934543707, 0.018663087696567625, 0.01903308104279863, 0.019457880596776098, 0.019943389058901542, 0.02049613099848463, 0.02112332534266564, 0.021832966447900268, 0.022633914741908016, 0.02353599803885992, 0.024550124759855935, 0.025688410436428378, 0.026964319039207235, 0.028392820859663, 0.029990568883073932, 0.03177609582909496, 0.03377003430666602, 0.03599536283726243, 0.03847768085024448, 0.04124551615280763, 0.04433066883240702, 0.04776859607046463, 0.051598842943233296, 0.055865524971331244, 0.060617868968456584, 0.06591081964969561, 0.07180572051159699, 0.07837107871485038, 0.08568342511606428, 0.09382828224397419, 0.10290125494120514, 0.11300926064840902, 0.12427191895767327, 0.13682312318508888, 0.1508128204044162, 0.16640903076288388, 0.18380014211166862, 0.20319752220708479, 0.2248384981968268, 0.24898976207591242, 0.27595127162577937, 0.30606072947165563, 0.3396987388548147, 0.3772947542092458, 0.4193339685343507, 0.46636530898642403, 0.5190107485058358, 0.5779761865005835, 0.6440642080086499, 0.7181891014673841, 0.8013946042891429, 0.8948749582193181, 0.9999999999999992, 0.019672141087613067, 0.01966902529787666, 0.01965969691764215, 0.01964421298750323, 0.019622668821374492, 0.019595198378323554, 0.01956197478808573, 0.019523211035356564, 0.019479160809619138, 0.01943011952908629, 0.019376425549354658, 0.019318461569620846, 0.01925665625184118, 0.019191486071068017, 0.01912347741841417, 0.01905320898173309, 0.01898131443320656, 0.018908485457661932, 0.01883547516065534, 0.018763101901222913, 0.01869225360078611, 0.018623892587075697, 0.018559061040193482, 0.01849888711714834, 0.018444591841479722, 0.018397496856022395, 0.01835903314958348, 0.01833075088242494, 0.01831433045110692, 0.018311594950605796, 0.018324524210844507, 0.018355270606051455, 0.01840617685891359, 0.018479796087544284, 0.018578914372124652, 0.018706576149994804, 0.01886611278332658, 0.01906117468268726, 0.019295767413261198, 0.01957429225874363, 0.019901591771546108, 0.020283000897628783, 0.02072440433076817, 0.021232300825266164, 0.02181387527901175, 0.02247707949158703, 0.023230722606090975, 0.02408457236006652, 0.025049468402118198, 0.026137449078516197, 0.027361893260622043, 0.02873767897202537, 0.030281360786937866, 0.032011368212222134, 0.03394822753858289, 0.03611480995670953, 0.038536609087119485, 0.041242051474612726, 0.0442628440572289, 0.04763436314429103, 0.051396090039038556, 0.05559209913082552, 0.0602716050745394, 0.06548957658811956, 0.07130742545350517, 0.07779378052670867, 0.08502535797860324, 0.09308794063503296, 0.10207748120600235, 0.11210134644098912, 0.12327972188412445, 0.13574720000617768, 0.14965457815430686, 0.16517089710117827, 0.18248575613500723, 0.20181194678763983, 0.22338845466792476, 0.24748388772475188, 0.27440039994910337, 0.3044781924648384, 0.3381006896925303, 0.3757005074813509, 0.417766353656854, 0.4648510304334408, 0.5175807440065682, 0.5766659711977846, 0.6429141886397036, 0.7172448397346605, 0.8007070025256703, 0.8945003329785013, 0.9999999999999996, 0.02988908924498443, 0.029884538547260392, 0.029870902213775426, 0.029848227653905084, 0.02981659431787164, 0.02977611434940246, 0.029726933501027723, 0.029669232313706134, 0.029603227563111408, 0.02952917397568673, 0.02944736621850838, 0.02935814116813236, 0.02926188046497253, 0.029159013361418833, 0.029050019873901604, 0.028935434251502315, 0.028815848776562496, 0.028691917916124916, 0.02856436284703131, 0.02843397638218606, 0.02830162833097074, 0.028168271333165386, 0.028034947213112043, 0.0279027939093712, 0.027773053044906314, 0.027647078214032294, 0.027526344075140815, 0.027412456352738063, 0.027307162868783343, 0.027212365741899187, 0.027130134913946335, 0.027062723186950792, 0.02701258297968236, 0.026982385042580773, 0.02697503940249986, 0.026993718845204198, 0.027041885284059545, 0.027123319408286668, 0.02724215405392439, 0.02740291179575339, 0.02761054731939553, 0.027870495200242006, 0.028188723790461882, 0.028571795997903424, 0.02902693783212979, 0.029562115694188738, 0.030186123499216976, 0.03090868084604059, 0.03174054358718574, 0.032693628308065846, 0.03378115239775586, 0.03501779158826908, 0.03641985705757626, 0.03800549443718633, 0.039794907341941625, 0.04181060835238234, 0.04407770073398644, 0.046624194579022726, 0.04948136151294431, 0.05268413262664853, 0.056271544888459216, 0.06028724196694031, 0.06478003617129632, 0.06980453910627589, 0.07542186966229533, 0.08170044914171579, 0.0887168946860886, 0.09655702374947414, 0.10531698419922046, 0.11510452676584054, 0.12604043906642654, 0.1382601633630949, 0.15191562367756345, 0.16717729197426784, 0.1842365279830054, 0.2033082330269522, 0.22463386516483508, 0.24848487131316482, 0.2751666021219786, 0.3050227876614125, 0.3384406669787601, 0.3758568829989689, 0.4177642769537504, 0.46471974467938226, 0.5173533521991118, 0.5763789519227931, 0.6426065960578344, 0.7169571137124735, 0.8004793070051479, 0.894370334991837, 0.9999999999999991};


    private void Start()
    {
        float[] coat = new float[coat1.Length];
        for (int i = 0; i < coat1.Length; i++)
        {
            coat[i] = (float)coat1[i];
        }
        
        Texture2D dataTexture = CreateDataTexture(256, 256, coat, Format.RGB);
        Material material = new Material(Shader.Find("Custom/ThinFilm"));
        material.SetTexture("Data Texture", dataTexture);
    }

    Texture2D CreateDataTexture(int width, int height, float[] rawData, Format format)
    {
        Texture2D texture = new Texture2D(width, height);

        Color[] pixelData;
        if (format == Format.RGB)
        {
            pixelData = new Color[rawData.Length / 3];
            
            int cnt = 0;
            for (int i = 0; i < rawData.Length; i += 3)
            {
                pixelData[cnt] = new Color(rawData[i], rawData[i + 1], rawData[i + 2], 1);
                cnt++;
            }
        }
        else
        {
            return null;
        }
        
        texture.SetPixels(pixelData);
        texture.Apply();
        return texture;
    }
}